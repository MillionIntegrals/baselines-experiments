name: 'swimmer_ppo'

env:
  name: vel.rl.env.mujoco
  game: 'Swimmer-v2'


vec_env:
  name: vel.rl.vecenv.dummy
  normalize: true  # Normalize observations


model:
  name: vel.rl.models.policy_gradient_model_separate

  policy_backbone:
    name: vel.rl.models.backbone.mlp
    input_length: 8
    hidden_layers: [64, 64]
    activation: 'tanh'

  value_backbone:
    name: vel.rl.models.backbone.mlp
    input_length: 8
    hidden_layers: [64, 64]
    activation: 'tanh'


reinforcer:
  name: vel.rl.reinforcers.on_policy_iteration_reinforcer

  algo:
    name: vel.rl.algo.policy_gradient.ppo

    entropy_coefficient: 0.0
    value_coefficient: 0.5

    cliprange: 0.2

    max_grad_norm: 0.5 # Gradient clipping parameter

  env_roller:
    name: vel.rl.env_roller.vec.step_env_roller
    gae_lambda: 0.95 # Generalized Advantage Estimator Lambda parameter
    number_of_steps: 2048 # How many environment steps go into a single batch

  parallel_envs: 1 # How many environments to run in parallel
  batch_size: 64 # How many samples can go into the model in one batch
  experience_replay: 10 # How many times to replay the experience

  discount_factor: 0.99 # Discount factor for the rewards


optimizer:
  name: vel.optimizers.adam
  lr: 3.0e-4
  epsilon: 1.0e-5


scheduler:
  name: vel.scheduler.linear_batch_scaler


commands:
  train:
    name: vel.rl.commands.rl_train_command
    total_frames: 1.0e6
    batches_per_epoch: 1

  record:
    name: vel.rl.commands.record_movie_command
    takes: 10
    videoname: 'swimmer_vid_{:04}.avi'
    sample_args:
      argmax_sampling: true
